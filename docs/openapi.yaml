---
swagger: '2.0'
info:
  title: Friends API
  description: App to support basic friendship functionality
  license:
    name: BSD License
  version: v1
host: localhost:8080
schemes:
- http
basePath: "/"
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  Basic:
    type: basic
security:
- Basic: []
paths:
  "/api/delete-friend/{friend_id}/":
    delete:
      operationId: api_delete-friend_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - api
    parameters:
    - name: friend_id
      in: path
      required: true
      type: string
  "/api/friends-list/":
    get:
      operationId: api_friends-list_list
      description: ''
      parameters:
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  "$ref": "#/definitions/User"
      tags:
      - api
    parameters: []
  "/api/friends/status/{user_id}/":
    get:
      operationId: api_friends_status_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
      tags:
      - api
    parameters:
    - name: user_id
      in: path
      required: true
      type: string
  "/api/requests/answer/":
    patch:
      operationId: api_requests_answer_partial_update
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
      tags:
      - api
    parameters: []
  "/api/requests/incoming/":
    get:
      operationId: api_requests_incoming_list
      description: ''
      parameters:
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  "$ref": "#/definitions/FriendRequest"
      tags:
      - api
    parameters: []
  "/api/requests/outgoing/":
    get:
      operationId: api_requests_outgoing_list
      description: ''
      parameters:
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  "$ref": "#/definitions/FriendRequest"
      tags:
      - api
    parameters: []
  "/api/requests/{sender_id}/":
    get:
      operationId: api_requests_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
      tags:
      - api
    parameters:
    - name: sender_id
      in: path
      required: true
      type: string
  "/api/send-request/{receiver_id}":
    post:
      operationId: api_send-request_create
      description: ''
      parameters: []
      responses:
        '201':
          description: ''
      tags:
      - api
    parameters:
    - name: receiver_id
      in: path
      required: true
      type: string
  "/api/users/":
    get:
      operationId: api_users_list
      description: ''
      parameters:
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  "$ref": "#/definitions/User"
      tags:
      - api
    parameters: []
  "/api/users/{id}/":
    get:
      operationId: api_users_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/User"
      tags:
      - api
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this user.
      required: true
      type: integer
  "/auth/jwt/create/":
    post:
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/TokenObtainPair"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/TokenObtainPair"
      tags:
      - auth
    parameters: []
  "/auth/jwt/refresh/":
    post:
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/TokenRefresh"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/TokenRefresh"
      tags:
      - auth
    parameters: []
  "/auth/jwt/verify/":
    post:
      operationId: auth_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/TokenVerify"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/TokenVerify"
      tags:
      - auth
    parameters: []
  "/auth/token/login/":
    post:
      operationId: auth_token_login_create
      description: Use this endpoint to obtain user authentication token.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/TokenCreate"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/TokenCreate"
      tags:
      - auth
    parameters: []
  "/auth/token/logout/":
    post:
      operationId: auth_token_logout_create
      description: Use this endpoint to logout user (remove user authentication token).
      parameters: []
      responses:
        '201':
          description: ''
      tags:
      - auth
    parameters: []
  "/auth/users/":
    get:
      operationId: auth_users_list
      description: ''
      parameters:
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  "$ref": "#/definitions/User"
      tags:
      - auth
    post:
      operationId: auth_users_create
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/UserCreatePasswordRetype"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/UserCreatePasswordRetype"
      tags:
      - auth
    parameters: []
  "/auth/users/activation/":
    post:
      operationId: auth_users_activation
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/Activation"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/Activation"
      tags:
      - auth
    parameters: []
  "/auth/users/me/":
    get:
      operationId: auth_users_me_read
      description: ''
      parameters:
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  "$ref": "#/definitions/User"
      tags:
      - auth
    put:
      operationId: auth_users_me_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/User"
      tags:
      - auth
    patch:
      operationId: auth_users_me_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/User"
      tags:
      - auth
    delete:
      operationId: auth_users_me_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - auth
    parameters: []
  "/auth/users/resend_activation/":
    post:
      operationId: auth_users_resend_activation
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/SendEmailReset"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/SendEmailReset"
      tags:
      - auth
    parameters: []
  "/auth/users/reset_password/":
    post:
      operationId: auth_users_reset_password
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/SendEmailReset"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/SendEmailReset"
      tags:
      - auth
    parameters: []
  "/auth/users/reset_password_confirm/":
    post:
      operationId: auth_users_reset_password_confirm
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/PasswordResetConfirm"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/PasswordResetConfirm"
      tags:
      - auth
    parameters: []
  "/auth/users/reset_username/":
    post:
      operationId: auth_users_reset_username
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/SendEmailReset"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/SendEmailReset"
      tags:
      - auth
    parameters: []
  "/auth/users/reset_username_confirm/":
    post:
      operationId: auth_users_reset_username_confirm
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/UsernameResetConfirm"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/UsernameResetConfirm"
      tags:
      - auth
    parameters: []
  "/auth/users/set_password/":
    post:
      operationId: auth_users_set_password
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/SetPassword"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/SetPassword"
      tags:
      - auth
    parameters: []
  "/auth/users/set_username/":
    post:
      operationId: auth_users_set_username
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/SetUsername"
      responses:
        '201':
          description: ''
          schema:
            "$ref": "#/definitions/SetUsername"
      tags:
      - auth
    parameters: []
  "/auth/users/{id}/":
    get:
      operationId: auth_users_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/User"
      tags:
      - auth
    put:
      operationId: auth_users_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/User"
      tags:
      - auth
    patch:
      operationId: auth_users_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/User"
      tags:
      - auth
    delete:
      operationId: auth_users_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - auth
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this user.
      required: true
      type: integer
definitions:
  User:
    type: object
    properties:
      email:
        title: Email address
        type: string
        format: email
        maxLength: 254
      id:
        title: ID
        type: integer
        readOnly: true
      username:
        title: Username
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        type: string
        readOnly: true
        minLength: 1
  FriendRequest:
    required:
    - sender
    - receiver
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      status:
        title: Status
        type: string
        enum:
        - P
        - A
        - R
      created_at:
        title: Created at
        type: string
        format: date-time
        readOnly: true
      sender:
        title: Sender
        type: integer
      receiver:
        title: Receiver
        type: integer
  TokenObtainPair:
    required:
    - username
    - password
    type: object
    properties:
      username:
        title: Username
        type: string
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
  TokenRefresh:
    required:
    - refresh
    type: object
    properties:
      refresh:
        title: Refresh
        type: string
        minLength: 1
      access:
        title: Access
        type: string
        readOnly: true
        minLength: 1
  TokenVerify:
    required:
    - token
    type: object
    properties:
      token:
        title: Token
        type: string
        minLength: 1
  TokenCreate:
    type: object
    properties:
      password:
        title: Password
        type: string
        minLength: 1
      username:
        title: Username
        type: string
        minLength: 1
  UserCreatePasswordRetype:
    required:
    - username
    - password
    - re_password
    type: object
    properties:
      email:
        title: Email address
        type: string
        format: email
        maxLength: 254
      username:
        title: Username
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        type: string
        pattern: "^[\\w.@+-]+$"
        maxLength: 150
        minLength: 1
      id:
        title: ID
        type: integer
        readOnly: true
      password:
        title: Password
        type: string
        minLength: 1
      re_password:
        title: Re password
        type: string
        minLength: 1
  Activation:
    required:
    - uid
    - token
    type: object
    properties:
      uid:
        title: Uid
        type: string
        minLength: 1
      token:
        title: Token
        type: string
        minLength: 1
  SendEmailReset:
    required:
    - email
    type: object
    properties:
      email:
        title: Email
        type: string
        format: email
        minLength: 1
  PasswordResetConfirm:
    required:
    - uid
    - token
    - new_password
    type: object
    properties:
      uid:
        title: Uid
        type: string
        minLength: 1
      token:
        title: Token
        type: string
        minLength: 1
      new_password:
        title: New password
        type: string
        minLength: 1
  UsernameResetConfirm:
    required:
    - new_username
    type: object
    properties:
      new_username:
        title: Username
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        type: string
        pattern: "^[\\w.@+-]+$"
        maxLength: 150
        minLength: 1
  SetPassword:
    required:
    - new_password
    - current_password
    type: object
    properties:
      new_password:
        title: New password
        type: string
        minLength: 1
      current_password:
        title: Current password
        type: string
        minLength: 1
  SetUsername:
    required:
    - current_password
    - new_username
    type: object
    properties:
      current_password:
        title: Current password
        type: string
        minLength: 1
      new_username:
        title: Username
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        type: string
        pattern: "^[\\w.@+-]+$"
        maxLength: 150
        minLength: 1
